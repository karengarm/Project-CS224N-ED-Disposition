import pandas as pd
from sklearn.naive_bayes import GaussianNB # https://scikit-learn.org/stable/modules/naive_bayes.html#gaussian-naive-bayes
from sklearn import metrics


# labels generated by chexbert that are also relevant to ED
chex_labels = ["Fracture", "Edema", "Cardiomegaly", "Pneumonia", "Atelectasis", "Pneumothorax", "Pleural Effusion"]

labels = [
	"Pneumonia", # XR CHEST and CT CHEST
	"Pneumothorax", # XR CHEST and CT CHEST
	"Pleural Effusion", # XR CHEST and CT CHEST
	"Edema", # "Pulmonary edema", "Cerebral edema"; XR CHEST and CT CHEST
	"Fracture", # "Rib fracture", "Skull fracture"; XR CHEST and CT CHEST
	"Infection",
	"Aspiration",
	"Cardiomegaly",
	"Opacities",
	"Atelectasis",
	"Intracranial hemorrhage",
	"Subarachnoid hemorrhage",
	"Subdural hemorrhage",
	"Epidural hemorrhage",
	"Intraparenchymal hemorrhage",
	"Intraventricular hemorrhage",
	"Stroke",
	"Diffuse axonal injury",
	"Appendicitis ",
	"Cholecystitis",
	"Abdominal Aortic Aneurysm",
	"Small bowel obstruction",
	"Pancreatitis",
	"Splenic laceration",
	"Liver laceration",
	"Colitis",
	"Pyelonephritis",
	"Nephrolithiasis",
	"Malignancy",
	"Pericaridial effusion",
	"Aortic dissection",
]

def explode_scores(example):
    new_example = {}
    for i in range(len(example["labels"])):
        label = example["labels"][i]
        score = example["scores"][i]
        new_example[label] = score

    return new_example

def zero_shot_results_to_pandas(raw_predictions, labels=labels):
    """
    raw_predictions: huggingface dataset like
    Dataset({
        features: ['sequence', 'labels', 'scores'],
        num_rows: 146149
    })
    returns a pandas dataframe
    """
    t = raw_predictions.map(
        explode_scores,
        remove_columns=["labels", "scores"],
    )
    return pd.DataFrame(t)[["sequence"] + labels]

def naive_bayes(X, y):
    nb = GaussianNB()
    nb.fit(X, y)
    y_pred = nb.predict(X)
    return y_pred

def get_labels(pred_df, true_df, labels=labels, threshold=0.5):
    df = pd.DataFrame({"sequence": pred_df["sequence"]})
    for col_name in labels:
        X = pred_df[[col_name]]
        
        if col_name in true_df:
            y_true = true_df[col_name]
            y = y_true.mask(y_true != 1, 0)
            y_pred = naive_bayes(X, y) == 1.0 # a pandas series?
        else:
            y_pred = X > 0.5
        df[col_name] = y_pred
    return df

def evaluate_naive_bayes(pred_df, true_df, col_name):
    """
    compare results against chexbert ground truth
    """
    X = pred_df[[col_name]]
    y_true = true_df[col_name]
    y = y_true.mask(y_true != 1, 0)

    y_pred = naive_bayes(X, y)
    
    print(col_name)
    print(metrics.classification_report(y, y_pred))
    fpr, tpr, thresholds = metrics.roc_curve(y, y_pred, pos_label=1)
    auc = metrics.auc(fpr, tpr)
    print("AUC", auc)